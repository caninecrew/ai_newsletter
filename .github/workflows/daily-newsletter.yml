name: Daily AI Newsletter

on:
  schedule:
    - cron: '14 8 * * *'  # Run at 8:00 AM Central Time daily
  workflow_dispatch:       # Allow manual trigger for testing

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout newsletter code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set DATE and newsletter URL
        run: |
          DATE=$(date +%Y-%m-%d)
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "NEWSLETTER_URL=https://samuelrumbley.com/newsletters/$DATE.html" >> $GITHUB_ENV
      
      - name: Generate newsletter
        env:
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
          NEWSLETTER_DOMAIN: ${{ secrets.NEWSLETTER_DOMAIN }}
          NEWS_SOURCE: ${{ secrets.NEWS_SOURCE }}
        run: |
          echo "Starting newsletter script..."
          python main.py
          
      - name: Create output directory
        run: |
          mkdir -p output/newsletters
          cp email.html "output/newsletters/${{ env.DATE }}.html"
          
      # Future web deployment steps (commented out until implementation)
      #- name: Generate archive index
      #  run: python -c "from ai_newsletter.web.archive import generate_archive_index; generate_archive_index()"
      
      #- name: Deploy to web server
      #  if: ${{ secrets.WEB_DEPLOY_ENABLED == 'true' }}
      #  uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      #  with:
      #    server: ${{ secrets.FTP_SERVER }}
      #    username: ${{ secrets.FTP_USERNAME }}
      #    password: ${{ secrets.FTP_PASSWORD }}
      #    local-dir: ./output/newsletters/
      #    server-dir: /newsletters/
      
      #- name: Cleanup old archives
      #  if: ${{ secrets.WEB_DEPLOY_ENABLED == 'true' }}
      #  run: python -c "from ai_newsletter.web.archive import cleanup_old_archives; cleanup_old_archives()"

      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newsletter-logs
          path: |
            logs.txt
            logs/*.log
          retention-days: 7

      - name: Report completion status
        if: success()
        run: |
          echo "Newsletter generated and archived successfully at $(date)"
          echo "Available at ${{ env.NEWSLETTER_URL }}"